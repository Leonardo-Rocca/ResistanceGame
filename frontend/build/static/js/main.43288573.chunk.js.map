{"version":3,"sources":["components/newGameForm.js","components/NewOrJoinElection.js","App.js","model/GameClient.js","serviceWorker.js","index.js","logo.svg"],"names":["NewGameForm","props","inputName","React","createRef","className","style","display","flexDirection","htmlFor","required","id","aria-describedby","name","inputRef","variant","color","onClick","onCreate","current","value","type","NewOrJoinGame","to","customHistory","createBrowserHistory","App","useState","player","createGame","playerName","host","Config","fetch","method","headers","createGame2","body","GameClient","then","resp","console","log","position","src","alt","height","maxWidth","history","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"uOAOe,SAASA,EAAYC,GAKhC,IAAMC,EAAUC,IAAMC,YAEtB,OACA,yBAAKC,UAAU,2BACX,sCACQ,yBAAKC,MAAO,CAACC,QAAS,OAAQC,cAAe,UAAYH,UAAU,wCAC/D,kBAAC,IAAD,CAAYI,QAAQ,YAApB,UACA,kBAAC,IAAD,CAAOC,UAAQ,EAACC,GAAG,UAAUC,mBAAiB,iBAAiBC,KAAK,SAC7DC,SAAUZ,IAEjB,6BACA,kBAAC,IAAD,CAAQa,QAAQ,YAAYC,MAAM,UAAWC,QAAS,kBAAIhB,EAAMiB,SAAShB,EAAUiB,QAAQC,QACnFC,KAAK,SAAShB,UAAU,0BADhC,W,8CCjBL,SAASiB,IAEpB,OACI,yBAAKjB,UAAU,2BACX,kBAAC,IAAD,CAAKE,QAAQ,QACT,kBAAC,IAAD,CAAMgB,GAAG,QAAT,IAAiB,kBAAC,IAAD,CAAQR,QAAQ,YAAYC,MAAM,WAAlC,WAGjB,kBAAC,IAAD,CAAMO,GAAG,QAAT,IAAiB,kBAAC,IAAD,mB,iECF3BC,EAAgBC,cAiCPC,MA/Bf,WAAgB,IAAD,EACevB,IAAMwB,SAAS,CAACC,OAAO,KADtC,mBAGPC,GAHO,UAGM,SAAChB,ICdP,SAAqBiB,GAEhC,IAAIC,EAIJ,MAHO,wBACPA,EAAOC,EAAOD,KAEP,CAEHF,WAFG,WAGC,OAAOI,MAAMF,EAAO,SAAW,CAC3BG,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,8BAA+B,QAK3CC,YAZG,WAaC,OAAOH,MAAMF,EAAK,iBAAiBD,EAAY,CAC3CI,OAAQ,OACRG,KAAM,GACNF,QAAS,CACL,eAAgB,mBAChB,8BAA+B,UDT3CG,CAAWzB,GAAMgB,aAAaU,KAAK,SAAAC,GAAI,OAAGC,QAAQC,IAAIF,OAE1D,OACA,yBAAKnC,UAAU,OACX,kBAAC,IAAD,CAAQsC,SAAS,UACT,kBAAC,IAAD,CAAY5B,QAAQ,MAApB,sBAMR,yBAAK6B,IAAI,sNACHC,IAAI,OAAOC,OAAO,UACxB,kBAAC,IAAD,CAAWC,SAAS,MAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,QAASxB,IACjB,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,IAAIC,UAAW7B,IACjC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,OAAOE,OAAQ,SAAAnD,GAAK,OAClC,kBAACD,EAAD,iBAAkBC,EAAlB,CAAyBiB,SAAUW,YExBnCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC,gB,4KEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.43288573.chunk.js","sourcesContent":["import React from 'react';\nimport FormHelperText from \"@material-ui/core/FormHelperText/FormHelperText\";\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\nimport Input from \"@material-ui/core/Input/Input\";\nimport Button from \"@material-ui/core/Button/Button\";\n\nexport default function NewGameForm(props) {\n\n    // <form method=\"post\" action=\"/game/players/name\" id=\"newForm\">\n    //   </form> \" changeFormUrl('/game/players/{1}','newForm','newName','')\"\n\n    const inputName=React.createRef();\n\n    return(\n    <div className=\"d-flex p-2 bd-highlight\">\n        <h2> Nueva</h2>\n                <div style={{display: 'flex', flexDirection: 'column',}} className=\"d-flex flex-column bd-highlight mb-3\">\n                    <InputLabel htmlFor=\"newNamet\">Nombre</InputLabel>\n                    <Input required id=\"newName\" aria-describedby=\"my-helper-text\" name=\"player\"\n                           inputRef={inputName}/>\n\n                    <br/>\n                    <Button variant=\"contained\" color=\"primary\"  onClick={()=>props.onCreate(inputName.current.value)}\n                            type=\"submit\" className=\"btn btn-lg btn-primary\">\n                        Crear\n                    </Button>\n                </div>\n\n        </div>);\n}","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport Box from \"@material-ui/core/Box/Box\";\n\n\nexport default function NewOrJoinGame() {\n\n    return (\n        <div className=\"d-flex p-2 bd-highlight\">\n            <Box display=\"flex\">\n                <Link to=\"/new\"> <Button variant=\"contained\" color=\"primary\">\n                    Nueva </Button>\n                </Link>\n                <Link to=\"/new\"> <Button>\n                    Unirse </Button>\n                </Link>\n            </Box>\n        </div>);\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport NewGameForm from \"./components/newGameForm\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport NewOrJoinGame from \"./components/NewOrJoinElection\";\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport { createBrowserHistory } from \"history\";\nimport GameClient from \"./model/GameClient\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nconst customHistory = createBrowserHistory();\n\nfunction App() {\n    const [state, setState] = React.useState({player:''});\n\n    let createGame = (name)=>{\n        GameClient(name).createGame().then(resp =>console.log(resp))\n    };\n    return (\n    <div className=\"App\">\n        <AppBar position=\"static\">\n                <Typography variant=\"h6\">\n                    Resistance Avalon\n                </Typography>\n\n        </AppBar>\n\n        <img src=\"https://ksr-ugc.imgix.net/assets/011/406/830/6384907307c62d307d774d5f8d2107f6_original.jpg?ixlib=rb-2.1.0&crop=faces&w=1552&h=873&fit=crop&v=1463682224&auto=format&frame=1&q=92&s=eab75fb0fad787eabdf8193de93b6728\"\n              alt=\"logo\" height=\"200px\" />\n        <Container maxWidth=\"sm\">\n            <Router>\n                <Router history={customHistory} />\n                <Route exact path=\"/\" component={NewOrJoinGame} />\n                <Route exact path=\"/new\" render={props =>\n                    <NewGameForm  {...props} onCreate={createGame}/>\n                } />\n\n            </Router>\n        </Container>\n    </div>\n  );\n}\n\nexport default App;\n","\nimport Config from '../config.json'\n\nexport default function  GameClient(playerName) {\n\n    let host = 'http:/om/';\n    host = \"http://localhost:5000\"\n    host = Config.host\n\n    return {\n\n        createGame() {\n            return fetch(host + '/Games' , {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Access-Control-Allow-Origin': '*'\n                }\n            });\n        }\n        ,\n        createGame2(){\n            return fetch(host+'/game/players/'+playerName, {\n                method: 'POST',\n                body: {},//JSON.stringify(playerName),\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Access-Control-Allow-Origin': '*'\n                }\n            });\n        }\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}